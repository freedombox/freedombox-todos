# -*- mode: org; mode: auto-fill; fill-column: 80; mode: org-indent; -*-

#+TODO: TODO(t) WAIT(w@/!) | DONE(d!) CANCELED(c@)

* Introduction

This is an integrated TODO list for the FreedomBox project, compiling todos from
each of the included projects.  Right now, we're trying to finish 1.0.  The 2.0
and 3.0 TODOs are not yet firm.

This file lives in a few repositories:

- https://github.com/NickDaly/freedombox-todos
- https://gitorious.org/freedombox-todos

** Projects

This section lists each of the projects tracked in this TODO list along with any
known repositories for those projects.

*** Freedom Maker

Freedom Maker (FM) is the central hub of the FreedomBox project, it builds and
installs the file-system image that turns any computer into a FreedomBox.

Bdale Garbee's master branch is the current root.

- [[http://anonscm.debian.org/gitweb/?p%3Dfreedombox/freedom-maker.git][Bdale Garbee's Branch]]
- [[https://github.com/NickDaly/freedom-maker/][Nick Daly's Branch]]

*** FreedomBox Setup

The configuration of a FreedomBox is collected in a debian package that can be
installed on any Debian system and configured by running
=/usr/lib/freedombox/setup=.

Petter Reinholdtsen's master branch is the current root.

- [[https://github.com/petterreinholdtsen/freedombox-setup][Petter Reinholdtsen's Branch]]

*** Plinth

Plinth is a web front end for administering every aspect of a Freedom Box.

Nick Daly's master branch is the current root.

- [[https://github.com/jvasile/plinth][James Vasile's Branch]]
- [[https://github.com/NickDaly/plinth][Nick Daly's Branch]]

The Debian packaging is maintained on Alioth.

- [[http://anonscm.debian.org/gitweb/?p=freedombox/plinth.git;a=summary][Alioth git repository]]

*** FreedomBuddy

FreedomBuddy manages service discovery between FreedomBoxes, coordinating
connections between friendly servers for any service.

Nick Daly's master branch is the current root.

- [[https://github.com/NickDaly/freedombuddy][Nick Daly's Branch]]
- [[https://github.com/tomgalloway/freedombuddy][Tom Galloway's Branch]]
- [[https://gitorious.org/freedombuddy][Gitorious Project]]

*** FreedomBox Privoxy

FreedomBox Privoxy filters out privacy threats and advertising for users while
they browse the Internet.

James Vasile's master branch is the current root.

- [[https://github.com/jvasile/freedombox-privoxy][James Vasile's Branch]]
- [[https://github.com/NickDaly/freedombox-privoxy][Nick Daly's Branch]]
- [[https://www.gitorious.org/freedombox-privoxy][Gitorious Project]]

*** With SQLite

With SQLite uses an SQLite database as a dictionary in Python.

Nick Daly's master branch is the current root.

- [[https://github.com/jvasile/withsqlite][James Vasile's Branch]]
- [[https://github.com/NickDaly/withsqlite][Nick Daly's Branch]]

*** Publish

Publish publishes projects (including bug trackers, wikis, and source archives)
in the simplest ways possible.

Nick Daly's master branch is the current root.

- [[https://gitorious.org/project-publish][Nick Daly's Branch]]

*** Key Report

Mentions keys that will expire soon.

Nick Daly's master branch is the current root.

- [[https://gitorious.org/key-report/][Nick Daly's Branch (gitorious)]], [[https://github.com/NickDaly/key-report/][(github)]]


* FreedomBox Pre-1.0 [0/1]

** TODO Infrastructure [0/1]

*** TODO Release Development VM

The VM will be pre-configured to make development and testing straightforward.


* FreedomBox 1.0 [0/3]

A dedicated hacker's release.  All the pieces are there, but not necessarily
integrated as well as they should be.

** TODO Documentation [0/1]

*** TODO Write Developer Documentation

Take the current state of the FBX and write up how to use all the parts
together.  Include notes on how to create services.  Include notes on who
manages each of:

- availability (FBuddy)
- authentication (Apache)
- authorization (OS-level users and groups)

** TODO Infrastructure [0/3]

*** TODO Add Single Sign On Support

Each service should use the FreedomBox's own user-level logins and should *not*
manage its own user names or passwords.  The goal is to improve security by
saving users from having to juggle multiple passwords.

If each service for each user on the FreedomBox manages its own users and
passwords, then each service will have completely unrelated usernames and
passwords for each user.  To avoid password hell, the box should manage accounts
and passwords /for each service:/ each service should let the box manage logins.

We can do this via the REMOTE_USER request header: Apache can handle this header
through [[https://httpd.apache.org/docs/trunk/en/mod/mod_authnz_ldap.html][LDAP with mod_authnz_ldap]] and [[https://code.google.com/p/mod-auth-external/][PAM with mod-auth-external]] (packaged as
libapache2-mod-authnz-external), while nginx can handle this header through [[http://web.iti.upv.es/~sto/nginx/][PAM
with ngx_http_auth_pam_module]] (packaged in Debian) and [[https://github.com/kvspb/nginx-auth-ldap][LDAP with nginx-auth-ldap]]
(not packaged in Debian).

The authorization process should be based on user groups ("Require Group
Wiki").  It's up to the individual service to decide what it wants to make
available to the user: either a shared resource (wiki) or a single service per
user (FBuddy).

Now, each service just needs to support the REMOTE_USER header.  Adopting this
method should make it easier to transition to using PGP keys as authenticators
later: the LDAP system should be able to associate system-level accounts with
PGP keys.

*** TODO Determine Where Smooth Upgrade Paths Exist

Smooth upgrade paths will not exist before 1.0, there's simply too much that
could change at any time.  We don't want to constrain ourselves to bad
architecture decisions that don't scale.  However, at some point between 1.0 and
3.0, they must exist.  So, will smooth upgrade paths exist from 1.0 to 2.0 and
beyond, from 2.0 to 3.0 and beyond, or only from 3.0 and beyond?

*** TODO Release 1 End User Service

At least one service should work with Plinth and use the SSO system, like the
wiki project.

** TODO Plinth [0/2]

*** TODO Create a Module Manager Module

It shouldn't be on the user to remove symlinks from plinth/modules to disable
Owncloud or Owncloud management.  This also makes it possible to include "add"
and "remove" actions in each module that can run services that need no user
configuration.

This module should be enabled by default.

*** TODO Automatically Set Time on First Boot

Prompt user to verify time.


* FreedomBox 2.0 [0/9]

Generally Useful, includes service configuration and UI polish.

Infrastructure packages should be available in Debian Testing.

** TODO Documentation [0/4]

*** TODO Clarify Authentication vs Authorization in the System

*** TODO Clean up FBF Wiki

*** TODO Coordinate End User Documentation

*** TODO Update FBF.org Style for Butterfly Logo

** TODO Freedom Maker [0/1]

*** TODO Use Official Debian Archives Only

Depends on:

- [[*Deliver%20FreedomBox%20Setup%20Debian%20Package][Deliver FreedomBox Setup Debian Package]]
- [[*Deliver%20FreedomBuddy%20Debian%20Package][Deliver FreedomBuddy Debian Package]]

** TODO FreedomBox Setup [0/2]

*** TODO Deliver FreedomBox Setup Debian Package

*** TODO Make sure the First Boot Process Meets Design Docs

1. User plugs ethernet cord into computer and DreamPlug's inside ethernet port.
2. User plugs in and boots DreamPlug.
3. First boot process completes, DreamPlug restarts.
4. User logs into Plinth and configures admin accounts, certificates, and
   networking (if necessary).  Requires dhcp-server.
5. User replugs ethernet cord into DreamPlug and router.
6. User uses FreedomBox normally.

Depends on [[*Teach%20Plinth%20to%20Manage%20Networking][Teach Plinth to Manage Networking]].

** TODO FreedomBuddy [0/11]

*** TODO Include in FreedomBox Image

*** TODO Write FreedomBuddy Threat Model
:PROPERTIES:
:Attachments: fbuddy-threat-model
:ID:       fc7e9d5e-7db7-4b7c-9efa-f5ca23d0eff5
:END:

- http://wiki.openitp.org/peerreviewboard:start

- [[file:data/fc/7e9d5e-7db7-4b7c-9efa-f5ca23d0eff5/fbuddy-threat-model.org][FreedomBuddy Threat Model]]

*** TODO Add Contracts to Functions.

Use PyContract to verify functional contracts.

*** TODO Finish Introduction System

1. Sender exports public key to file.
2. Sender exports signed location message to file.
3. Sender archives both files.
4. Sender and receiver exchange the archive.
5. Receiver unpacks the archive.
6. Receiver imports public key.
7. Receiver verifies and imports signed location message.

*** TODO Add Default Services [0/3]

Make a default set of services available to make it easy for folks to start
hosting services for someone else.  It could be a sort of "add a new user"
wizard that sets the default services and creates the introduction message
archive.

We need to create a "default" key that is loaded into the shelf only when the
shelf doesn't already contain a default service set.  That service set should
contain the current default services:

- http listener
- http sender
- http monitor
- cli monitor

**** TODO Load Default Services

If default services aren't found in the saved data, they're read from the config
file.

**** TODO Reject "Default" Key Updates

The "Default" key is a special, protected, key (maybe 0, maybe "default") for
which all external service updates are rejected, in the same way the
"-update-time" service suffix is protected.

**** TODO Copy Default Services when Adding a New Key

The services you want to host for other people are copied to their service list
whenever a new key is added.

*** TODO Finish FreedomBuddy UI

Support friendly names for servers and services.  I expect Plinth will scrape
this data from FBuddy to display in an internal Plinth module.

What would that UI look like?

| Servers | Services                |
|---------+-------------------------|
| Joe     | wiki                    |
|         | blog                    |
|         | The Lead Rose (emoblog) |
| Pam     | coffee                  |
| Tina    | Tinipedia (wiki)        |

Here, Joe provides both a blog and an emoblog.

If the service specifies a friendly name:

: Service Name (service type)

Else:

: Service Type

Users must specify a friendly name for Servers.

*** TODO Deliver FreedomBuddy Debian Package

*** TODO Split Message Parsing per Encryption Method

This will allow FBuddy to handle multiple encryption schemes.

*** TODO Split Database Saving/Loading Code into Separate Module

Move the db code into /src/db/(modulename).py.

This'll allow us to support multiple database backends that we can
preferentially check for data.  LDAP first, shelf second, etc.

*** TODO Add LDAP database backend

*** TODO Add REMOTE_USER Authentication [0/4]

- [ ] Put FreedomBuddy behind Apache.
- [ ] Apache config requires users in freedombuddy service group.
- [ ] HTTPS controller rejects HTTP connections.
- [ ] HTTPS controller requires REMOTE_USER.

** TODO Infrastructure [0/11]

*** TODO Include DHCP Server

*** TODO Use NoLogin Shell for User Accounts

For this to be successful, users must be able to manage the system without
loggging into the system.  If we must log into the system to manage it while
building it, it's not release-ready.


*** TODO Remove or Disable "root" Account.

*** TODO Remove or Disable "fbx" Account.

*** TODO Use FreedomBuddy and/or Tinc to connect all services.

Services may have to become FreedomBuddy aware.  Right now, it's impossible to
say "connect to Joe" and have that command mean anything useful.

*** TODO Glue Pieces Together

*** TODO Deliver FreedomBox Debian Meta-Package

*** TODO Improve GNUTLS

*** TODO Include a Smarter MAC Changer

Rely on something like this:

https://github.com/Boruch-Baum/mac_changer_choice

Make sure it's packaged, though.

*** TODO Teach Apache to use PGP keys for Client Authentication

*** TODO Teach FireFox to use PGP keys for Server Authentication

Maybe we can fake this by teaching Firefox to handle PGP-certified-X509-certs?

** TODO JWChat [0/2]

*** TODO Suppport local server connections.

Can clients on the local server exchange messages?

*** TODO Suppport server connections.

Can cilents on the local server exchange messages with remote clients?

** TODO Key Report [0/3]

*** TODO Automatically Message Critical and Warning Key Owners

*** WAIT Package Key Report
- State "WAIT"       from "TODO"       [2014-01-29 Wed 20:33] \\
  Jonas submitted [[http://bugs.debian.org/cgi-bin/bugreport.cgi?bug=722554][bug 722554]].

*** TODO Make Human-Readable Mode

The output is intended for other utilities and isn't human readable right now.
There should be such a human-friendly mode.

** TODO Plinth [0/23]

Support more services as Plinth modules.  Make sure they:

- Work only over HTTPS,
- Defer authorization to Apache's REMOTE_USERs.

*** TODO Teach Plinth to Manage Networking

*** TODO Add =includeSubDomains= to HSTS Header

This will require lots of debugging and patching for each additional project we
host.

*** TODO Create ~/bin/echo~ and ~/bin/id~ Actions Only While Testing

This will fix a lintian error.  Those actions should be created by the test
script and they should be removed when the testing is complete.

*** TODO Plinth Handles Missing Actions Gracefully

If an action isn't available, Plinth should handle that failure gracefully and
not crash or ignore the missing action.

*** TODO Make (OwnCloud) Setup Page Smarter and Asynchronous

OwnCloud setup (and any step that could potentially take a long time) should be
better handled within Plinth.  Right now, we don't handle it at all and just
fork a process in the background, leaving the user to wonder why the service
isn't available, even though the system has obviously refreshed the page.

We don't, but should, land the user on a page that polls the state of the
install every few seconds with a several-minute countdown timer.  When the timer
reaches zero, the page redirects the user to an error page.  However, if the
setup process finishes at any time before then, the user is redirected to the
OwnCloud install.

*** TODO Suggest, Don't Depend On, PyContract

This will fix a lintian error.

PyContract is working and stable, but orphaned.  It's handy and helpful, but
strictly unnecessary.  Specifically, since PyContract makes comments executable,
it should be invisible when missing:

#+begin_src python
  try:
      import contract
  except ImportError:
      print("To enable contract checking, install Python Contract.")

  def add_positive(a, b):
      """Add positive numbers.

      PyContract automatically evaluates these commetns for truthiness
      during execution.

      pre:         # before calling add_positive
          a > 0
          b > 0

      post[a, b]:  # after calling add_positive
          __return__ > a
          __return__ > b
          a == __old__.a
          b == __old__.b

      inv:         # before and after calling add_positive
          hasattr(a, "__add__")
          hasattr(b, "__add__")

      """
      return a + b

#+end_src

The contract is checked when pycontract is available and has no functional
effects when pycontract isn't available (or when Python is run with ~-O3~).

*** TODO Support OONI

*** TODO Support Tor

*** TODO Support Blog

*** TODO Support Wiki

Ikiwiki can use the http_auth module to manage logins via REMOTE_USER and can
take the setup logic from [[https://bitbucket.org/nickdaly/plugserver/src/tip/setup/wiki/][Plug Server's Wiki Setup Scripts]].

*** TODO Support Friendica

*** TODO Support FreedomBuddy

*** TODO Support PageKite

*** TODO Support Tahoe-LAFS

*** TODO Create Generic Service Frameworks

For example, provide a "vpn" command to client services that specifically need
it so that we can swap out VPN backends at whim.  This would also be handy for
defining functional dependencies between modules, for when one module needs to
enable a feature in another module to function correctly.

*** TODO Add MAC Changer to Plinth

Bounce any/all active interfaces to come up with new MAC addresses.

*** TODO Use Publish to publish Plinth's Source

That'd be useful and convenient, but should exclude the data directory.

*** TODO Start Community Heartbeat Support

Boxes should be able to ping other boxes for health information about their
mutual connections and other data.  Boxes could run tests on other boxes to make
sure they're still in one piece and send out communal alerts when a box is found
to be failing ("Alice has a bad network connection," "Bob's sending out
malware!").

Perhaps start with distributing ~/etc~ backups, key(ring) backups, or time
syncing.

Might be broken out into a separate heartbeat project.

*** TODO Integrate Tinc into Plinth [0/1]

**** TODO Tinc Testing

http://www.vanheusden.com/linux/tinc_mini_howto.html

*** TODO Divide plinth/modules into modules/available and modules/enabled

Making it look a little more like the Apache configuration will make it easier
to manage and understand in the future.

*** TODO Create an ~/etc~ Configuration Manager Module

Allows user to roll back and fork their ~/etc~ configuration via /etckeeper/.

How should Plinth refresh its configuration?  On each page load?  Should it
cache each settings file's values based on the last modified date (akin to
make)?

The [[*Run%20%3Detc-keeper%20--commit%3D%20Around%20Each%20Action][Run =etc-keeper --commit= Around Each Action]] and [[*Commit%20~/etc~%20Periodically][Commit ~/etc~ Periodically]]
TODO items will also be included in this module when it's complete.

*** TODO Run =etc-keeper --commit= Around Each Action

Actions change ~/etc~.  To make ~/etc~ manageable, we should commit ~/etc~
changes before and after running each action.

Committing changes before each action will capture the system's state before the
action changes things.  This can include changes made *outside* Plinth.

Committing changes after each action will capture the system's state after the
action changes things.  This should only include changes made *by* Plinth.

Combining both before and after snapshots should allow users to separate changes
made by Plinth from changes made through other methods.

*** TODO Commit ~/etc~ Periodically

Just automatically commit changes weekly so we can track them over time, to
prevent them from becoming unmanageable.

** TODO Publish [0/4]

*** TODO Add ~design~ Directory Support

*** TODO Make sure it works in Debian Testing.

*** TODO Release Debian Package

*** TODO Add a Deploy Action

This action copies Publish to a subdirectory of the current directory and adds a
startup action to ~/etc/project-publish.d/~.

** TODO VPN Support [0/2]

When available, FreedomBoxes will construct VPNs to communicate between one
another.  It seems unlikely that all these VPNs will form a single, large,
network but, rather, that each FreedomBox will construct its own VPN network by
which it can reach all of its trusted peers.  This should help to prevent
non-mutually trusted peers from seeing one another and leaking the
social/network graph.

When VPNs aren't available, FreedomBuddy can still be used to create direct
connections over arbitrary networks.  However, this is less desirable as it
doesn't abstract away the network protocol and reqiures each application to be
able to use the protocol.  For example, if your browser doesn't understand how
to handle the webserver at gnunet://00000000, you're out of luck.  There is
still the option of just communicating directly over FreedomBuddy, but that's a
really roundabout way of doing things.

We should include a VPN system.  OpenSwan, Tinc, and librevpn appear to be
options.

*** TODO Include OpenSwan

James recommended OpenSwan over the similar StrongSwan.

*** TODO Include Tinc [1/2]

**** TODO Actually Include Tinc.

**** DONE Validate Tinc's Suitability [4/4]
CLOSED: [2014-01-29 Wed 21:13]
- State "DONE"       from "TODO"       [2014-01-29 Wed 21:13]

According to [[http://lists.alioth.debian.org/pipermail/freedombox-discuss/2013-September/005709.html][Guus]] on the "[Freedombox-discuss] [James Vasile] tinc rollout and
fbox" thread, the answers are as follow:

- [X] Can Tinc work, now? :: Yes

- [X] Can Tinc work, ever? :: Yes

- [X] Unpatched Tinc Problems :: None.

- [X] Patched Tinc Problems :: All

***** [2013-08-13 Tue] Nick Daly

Yes, Tinc has [[http://www.tinc-vpn.org/security/][problems]], but they seem to be resolvable or ignorable:

#+begin_quote
  James Vasile:

  As for those security points, we could address them and ship our own
  Tinc that is incompatible with existing Tinc.  Going off of the
  problems listed at http://www.tinc-vpn.org/security/ I see a
  relatively easy fixes.

  1. Randomize the IV for each packet.

  2. Increase default HMAC length or just config it to be longer.

  3. We could add padding in RSA.  And there are easily-implemented
     techniques for defending against RSA timing attacks.

  4. The Auth Protocol problem doesn't look worth fixing to me.  In
     paractice that's a DOS attack unless I'm missing something.

  The cost of these is dev time and a little on the performance side.

  But we can ship Tinc as-is and fix those points over time.  Tinc is
  rather good security for now.

#+end_quote

***** [2014-01-29 Wed] Nick Daly

I just remembered that someone mentioned these issues were fixed in a
1.something Tinc release...  Where in Pete's name on the mailing list was that?


* FreedomBox 3.0 [0/2]

A generally usable consumer device.

Viable upgrade paths must exist between 2.0 and 3.0.

** TODO Infrastructure [0/1]

*** TODO Generally Disable Logging

FreedomBoxes shouldn't be able to compromise previous end users after the box is
affected by malware.

** TODO Plinth [0/1]

*** TODO Split Plinth into Multiple Debian Packages

Every (non-core) module should be its own package to make remixing the system
easier (i.e., create a Plinth-Owncloud module that contains modules/owncloud.py,
which depends on Owncloud).


* Unscheduled [0/2]

These todo items aren't currently scheduled for any milestone.

** TODO Infrastructure [0/3]

*** TODO Client Applications

The system as a whole would be easiest to manage if we were able to provide
recommended client-device applications as well, though nothing more than a
web-browser with identity management should be necessary.

*** TODO Automatic Performance Benchmarking and ETA Estimation

We can manually test CPU and disk performance (number of digits of pi calculated
in 5 seconds, number of incremental file reads and writes in 5 seconds,
respectively) and use that as a benchmark to provide reasonable
estimated-completion times for specific tasks:

1. Benchmark any computer on the standard test actions.
2. Benchmark the time a particular action takes to complete.
3. Benchmark the target system on the standard test actions.
4. Estimate a particular action's completion time by scaling the time
   benchmarks appropriately.

If the benchmarks are quick enough, we can even re-benchmark every time the FBX
or Plinth start up.

*** TODO Look into upstreaming @synchronized

The Orange Duck provided a beautiful [[http://www.theorangeduck.com/page/synchronized-python][@synchronized]] implementation, which should
be upstreamed into a PEP so it's available everywhere.  Then, Plinth (and other
projects) should use it for their synchronized sections.

** TODO Freedom Maker [0/1]

*** TODO Make Freedom Maker Smarter

Do a better job of abstracting away devices into configuration options.  For
example, if we're building for a DreamPlug target, we should enable the
blink-blinkenlights option (the DreamPlug has LEDs we can use to signal to the
user), but that should be disabled for a RaspberryPi, as that functionality
isn't available at best (and might cause undefined behavior in the Pi at worst).

Break out devices by type:

1. DreamPlug v1
2. RaspberryPi
3. VirtualBox Image

These capabilities can go into FreedomBox Setup if they can be detected
dynamically.


* Theory [0/1]

These items need to be thought about more.

** TODO Think about trust ratings

Services can announce how much faith they have in each peer for any particular
purpose.  That'd be neat.

For example, if a service starts receiving updates from a peer that have future
time-stamps, it should signal that the peer has a screwy clock.
